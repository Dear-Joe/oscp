
function print_output($command){ 
  Write-Output " "
  Write-Output " "
  print_head($command)
  Write-Output "#    $command     #"
  print_head($command)
}

function print_head($command){ 
  $str = ""
  For ($i=0; $i -le $command.length + 10; $i++) {
    $str+="#"
}
Write-Output $str

}

$dom_to_use = 'DEV';
$domain_name = 'dev.domain.com'

print_output("Get forest")
Get-NetForest

print_output("Get forest Trust")
Get-ForestTrust

print_output("Domain trust") 
Get-NetDomainTrust

print_output("Checking if domain sid is enabled ") 
Get-DomainTrust -Domain $domain_name | findStr TREAT_AS_EXTERNAL


print_output("Admin through GPO") 
Get-DomainGPOUserLocalGroupMapping -Domain $domain_name 
Get-DomainGPOUserLocalGroupMapping -Domain $domain_name | select-object -property ObjectName, ComputerName | foreach-object {Write-output($_); write-output("Member"); Get-DomainGroupMember $_.ObjectName | select GroupDomain, GroupName, MemberName, MemberObjectClass | ft}

print_output("RDP through GPO") 
Get-DomainComputer -Domain $domain_name  | Get-DomainGPOComputerLocalGroupMapping -LocalGroup RDP

print_output("Local Admin Group GPO") 
Get-DomainGPOLocalGroup  -domain $domain_name | where-object{$_.GroupMembers} | foreach-object{Write-Output("GPO Group");write-output($_.GroupName);Write-Output("========"); ($_.GPODisplayName); Write-Output("========");Write-Output("Local Admin Group-Member"); Write-Output("========"); $_.GroupMembers | foreach-object {write-output (convertfrom-sid $_);} }


print_output("Member of Group") 
Get-DomainGroupMember LinuxUsers -domain $domain_name  | select GroupDomain, GroupName, MemberName, MemberObjectClass | ft

print_output("Checking if LAPS exist ") 
Get-ChildItem 'C:\Program Files\LAPS\CSE\Admpwd.dll' -ErrorAction SilentlyContinue 
Get-ChildItem 'C:\Program Files (x86)\LAPS\CSE\Admpwd.dll' -ErrorAction SilentlyContinue 

print_output("Object allowed to read the LAPS password property") 
Get-NetOU | 
    Get-ObjectAcl -ResolveGUIDs | 
    Where-Object {
        ($_.ObjectType -like 'ms-Mcs-AdmPwd') -and 
        ($_.ActiveDirectoryRights -match 'ReadProperty')
    } | ForEach-Object {
        $_ | Add-Member NoteProperty 'IdentitySID' $(Convert-NameToSid $_.IdentityReference).SID;
        $_
    }

print_output("LAPS ") 
Get-DomainComputer | select-object -property cn,ms-mcs-admpwd | ft


print_output("ACL Query User")
Get-DomainUser  | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity



Get-DomainUser  -domain $domain_name | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$dom_to_use\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$dom_to_use\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity

print_output("ACL Query Group")
Get-DomainGroup  | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity

Get-DomainGroup  -domain $domain_name | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$dom_to_use\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$dom_to_use\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity


print_output("ACL Query Computer")
Get-DomainComputer  | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$env:UserDomain\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity


Get-DomainComputer  -domain $domain_name | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object { $_ } | where-object{( ($_.ActiveDirectoryRights -like '*GenericAll*' -or ($_.ActiveDirectoryRights -like '*GenericWrite*') -or ($_.ActiveDirectoryRights -like '*WriteOwner*') -or ($_.ActiveDirectoryRights -like '*WriteDACL*') -or ($_.ActiveDirectoryRights -like '*AllExtendedRights*') -or ($_.ActiveDirectoryRights -like '*ForceChangePassword*') -or ($_.ActiveDirectoryRights -like '*Self*') -or ($_.ActiveDirectoryRights -like '*ExtendedRight*' -and $_.ObjectAceType -like '*User-Force-Change-Password*') ) -and ($_.Identity -NotLike "*Principal Self" -and $_.Identity -NotLike "*Creator Owner"  -and $_.Identity -NotLike "*Local System*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike "*BUILTIN\Administrators*" -and $_.Identity -NotLike "*BUILTIN\Account Operators*" -and $_.Identity -NotLike ("*"+$("$dom_to_use\Domain Admins")+"*")  -and $_.Identity -NotLike ("*"+$("$dom_to_use\Enterprise Admins")+"*") )  )} | select AceQualifier, ObjectDN, ActiveDirectoryRights, ObjectAceType, Identity


print_output("Get Unconstrained delegation")
Get-DomainComputer -Unconstrained | select-object -property cn
Get-DomainComputer -Domain $domain_name  -Unconstrained | select-object -property cn

print_output("Constrained delegation")
Get-DomainUser -TrustedToAuth | select-object -property cn
Get-DomainUser -Domain $domain_name -TrustedToAuth | select-object -property cn

Get-DomainComputer -TrustedToAuth | select-object -property cn
Get-DomainComputer -Domain $domain_name -TrustedToAuth | select-object -property cn

print_output("Get SPN")
Get-DomainUser -spn | select-object -property cn, serviceprincipalname
Get-DomainUser -SPN | Get-DomainSPNTicket -OutputFormat John

Get-DomainUser -spn -Domain $domain_name| select-object -property cn, serviceprincipalname
Get-DomainUser -spn -Domain $domain_name| Get-DomainSPNTicket -OutputFormat John





